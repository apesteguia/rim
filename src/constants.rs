#[derive(Debug)]
pub enum Lenguaje {
    Rust,
    Elixir,
    C,
    Cpp,
    JavaScript,
    TypeScript,
    Java,
    Lua,
    Python,
    Txt,
    Markdown,
    Jsx,
    Assembly,
    Haskell,
    OCaml,
    Clojure,
    Go,
    Css,
    Html,
    Bash,
    Php,
    Ruby,
    Undefined,
}

pub fn obtener_nombre_lenguaje(codigo: &str) -> Option<Lenguaje> {
    match codigo.to_lowercase().as_str() {
        "rs" => Some(Lenguaje::Rust),
        "ex" | "exs" => Some(Lenguaje::Elixir),
        "c" | "h" => Some(Lenguaje::C),
        "cpp" | "c++" | "hpp" => Some(Lenguaje::Cpp),
        "js" => Some(Lenguaje::JavaScript),
        "ts" => Some(Lenguaje::TypeScript),
        "java" => Some(Lenguaje::Java),
        "lua" => Some(Lenguaje::Lua),
        "py" => Some(Lenguaje::Python),
        "txt" => Some(Lenguaje::Txt),
        "md" | "mdx" => Some(Lenguaje::Markdown),
        "jsx" | "tsx" => Some(Lenguaje::Jsx),
        "s" | "asm" | "nasm" => Some(Lenguaje::Assembly),
        "hs" => Some(Lenguaje::Haskell),
        "ml" => Some(Lenguaje::OCaml),
        "cjl" => Some(Lenguaje::Clojure),
        "go" => Some(Lenguaje::Go),
        "css" => Some(Lenguaje::Css),
        "html" => Some(Lenguaje::Html),
        "sh" => Some(Lenguaje::Bash),
        "php" => Some(Lenguaje::Php),
        "rb" => Some(Lenguaje::Ruby),
        _ => Some(Lenguaje::Undefined),
    }
}
